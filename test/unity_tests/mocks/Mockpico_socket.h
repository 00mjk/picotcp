/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCKPICO_SOCKET_H
#define _MOCKPICO_SOCKET_H

#include "pico_socket.h"

void Mockpico_socket_Init(void);
void Mockpico_socket_Destroy(void);
void Mockpico_socket_Verify(void);


typedef void(*cmock_pico_socket_func_ptr1)(uint16_t ev, struct pico_socket* s);


#define pico_socket_open_IgnoreAndReturn(cmock_retval) pico_socket_open_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void pico_socket_open_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, struct pico_socket* cmock_to_return);
#define pico_socket_open_ExpectAndReturn(net, proto, wakeup, cmock_retval) pico_socket_open_CMockExpectAndReturn(__LINE__, net, proto, wakeup, cmock_retval)
void pico_socket_open_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint16_t net, uint16_t proto, cmock_pico_socket_func_ptr1 wakeup, struct pico_socket* cmock_to_return);
typedef struct pico_socket* (* CMOCK_pico_socket_open_CALLBACK)(uint16_t net, uint16_t proto, cmock_pico_socket_func_ptr1 wakeup, int cmock_num_calls);
void pico_socket_open_StubWithCallback(CMOCK_pico_socket_open_CALLBACK Callback);
#define pico_socket_read_IgnoreAndReturn(cmock_retval) pico_socket_read_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void pico_socket_read_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define pico_socket_read_ExpectAndReturn(s, buf, len, cmock_retval) pico_socket_read_CMockExpectAndReturn(__LINE__, s, buf, len, cmock_retval)
void pico_socket_read_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, struct pico_socket* s, void* buf, int len, int cmock_to_return);
typedef int (* CMOCK_pico_socket_read_CALLBACK)(struct pico_socket* s, void* buf, int len, int cmock_num_calls);
void pico_socket_read_StubWithCallback(CMOCK_pico_socket_read_CALLBACK Callback);
#define pico_socket_write_IgnoreAndReturn(cmock_retval) pico_socket_write_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void pico_socket_write_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define pico_socket_write_ExpectAndReturn(s, buf, len, cmock_retval) pico_socket_write_CMockExpectAndReturn(__LINE__, s, buf, len, cmock_retval)
void pico_socket_write_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, struct pico_socket* s, const void* buf, int len, int cmock_to_return);
typedef int (* CMOCK_pico_socket_write_CALLBACK)(struct pico_socket* s, const void* buf, int len, int cmock_num_calls);
void pico_socket_write_StubWithCallback(CMOCK_pico_socket_write_CALLBACK Callback);
#define pico_socket_sendto_IgnoreAndReturn(cmock_retval) pico_socket_sendto_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void pico_socket_sendto_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define pico_socket_sendto_ExpectAndReturn(s, buf, len, dst, remote_port, cmock_retval) pico_socket_sendto_CMockExpectAndReturn(__LINE__, s, buf, len, dst, remote_port, cmock_retval)
void pico_socket_sendto_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, struct pico_socket* s, const void* buf, int len, void* dst, uint16_t remote_port, int cmock_to_return);
typedef int (* CMOCK_pico_socket_sendto_CALLBACK)(struct pico_socket* s, const void* buf, int len, void* dst, uint16_t remote_port, int cmock_num_calls);
void pico_socket_sendto_StubWithCallback(CMOCK_pico_socket_sendto_CALLBACK Callback);
#define pico_socket_recvfrom_IgnoreAndReturn(cmock_retval) pico_socket_recvfrom_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void pico_socket_recvfrom_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define pico_socket_recvfrom_ExpectAndReturn(s, buf, len, orig, local_port, cmock_retval) pico_socket_recvfrom_CMockExpectAndReturn(__LINE__, s, buf, len, orig, local_port, cmock_retval)
void pico_socket_recvfrom_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, struct pico_socket* s, void* buf, int len, void* orig, uint16_t* local_port, int cmock_to_return);
typedef int (* CMOCK_pico_socket_recvfrom_CALLBACK)(struct pico_socket* s, void* buf, int len, void* orig, uint16_t* local_port, int cmock_num_calls);
void pico_socket_recvfrom_StubWithCallback(CMOCK_pico_socket_recvfrom_CALLBACK Callback);
#define pico_socket_send_IgnoreAndReturn(cmock_retval) pico_socket_send_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void pico_socket_send_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define pico_socket_send_ExpectAndReturn(s, buf, len, cmock_retval) pico_socket_send_CMockExpectAndReturn(__LINE__, s, buf, len, cmock_retval)
void pico_socket_send_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, struct pico_socket* s, const void* buf, int len, int cmock_to_return);
typedef int (* CMOCK_pico_socket_send_CALLBACK)(struct pico_socket* s, const void* buf, int len, int cmock_num_calls);
void pico_socket_send_StubWithCallback(CMOCK_pico_socket_send_CALLBACK Callback);
#define pico_socket_recv_IgnoreAndReturn(cmock_retval) pico_socket_recv_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void pico_socket_recv_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define pico_socket_recv_ExpectAndReturn(s, buf, len, cmock_retval) pico_socket_recv_CMockExpectAndReturn(__LINE__, s, buf, len, cmock_retval)
void pico_socket_recv_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, struct pico_socket* s, void* buf, int len, int cmock_to_return);
typedef int (* CMOCK_pico_socket_recv_CALLBACK)(struct pico_socket* s, void* buf, int len, int cmock_num_calls);
void pico_socket_recv_StubWithCallback(CMOCK_pico_socket_recv_CALLBACK Callback);
#define pico_socket_bind_IgnoreAndReturn(cmock_retval) pico_socket_bind_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void pico_socket_bind_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define pico_socket_bind_ExpectAndReturn(s, local_addr, port, cmock_retval) pico_socket_bind_CMockExpectAndReturn(__LINE__, s, local_addr, port, cmock_retval)
void pico_socket_bind_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, struct pico_socket* s, void* local_addr, uint16_t* port, int cmock_to_return);
typedef int (* CMOCK_pico_socket_bind_CALLBACK)(struct pico_socket* s, void* local_addr, uint16_t* port, int cmock_num_calls);
void pico_socket_bind_StubWithCallback(CMOCK_pico_socket_bind_CALLBACK Callback);
#define pico_socket_connect_IgnoreAndReturn(cmock_retval) pico_socket_connect_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void pico_socket_connect_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define pico_socket_connect_ExpectAndReturn(s, srv_addr, remote_port, cmock_retval) pico_socket_connect_CMockExpectAndReturn(__LINE__, s, srv_addr, remote_port, cmock_retval)
void pico_socket_connect_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, struct pico_socket* s, const void* srv_addr, uint16_t remote_port, int cmock_to_return);
typedef int (* CMOCK_pico_socket_connect_CALLBACK)(struct pico_socket* s, const void* srv_addr, uint16_t remote_port, int cmock_num_calls);
void pico_socket_connect_StubWithCallback(CMOCK_pico_socket_connect_CALLBACK Callback);
#define pico_socket_listen_IgnoreAndReturn(cmock_retval) pico_socket_listen_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void pico_socket_listen_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define pico_socket_listen_ExpectAndReturn(s, backlog, cmock_retval) pico_socket_listen_CMockExpectAndReturn(__LINE__, s, backlog, cmock_retval)
void pico_socket_listen_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, struct pico_socket* s, const int backlog, int cmock_to_return);
typedef int (* CMOCK_pico_socket_listen_CALLBACK)(struct pico_socket* s, const int backlog, int cmock_num_calls);
void pico_socket_listen_StubWithCallback(CMOCK_pico_socket_listen_CALLBACK Callback);
#define pico_socket_accept_IgnoreAndReturn(cmock_retval) pico_socket_accept_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void pico_socket_accept_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, struct pico_socket* cmock_to_return);
#define pico_socket_accept_ExpectAndReturn(s, orig, port, cmock_retval) pico_socket_accept_CMockExpectAndReturn(__LINE__, s, orig, port, cmock_retval)
void pico_socket_accept_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, struct pico_socket* s, void* orig, uint16_t* port, struct pico_socket* cmock_to_return);
typedef struct pico_socket* (* CMOCK_pico_socket_accept_CALLBACK)(struct pico_socket* s, void* orig, uint16_t* port, int cmock_num_calls);
void pico_socket_accept_StubWithCallback(CMOCK_pico_socket_accept_CALLBACK Callback);
#define pico_socket_del_IgnoreAndReturn(cmock_retval) pico_socket_del_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void pico_socket_del_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int8_t cmock_to_return);
#define pico_socket_del_ExpectAndReturn(s, cmock_retval) pico_socket_del_CMockExpectAndReturn(__LINE__, s, cmock_retval)
void pico_socket_del_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, struct pico_socket* s, int8_t cmock_to_return);
typedef int8_t (* CMOCK_pico_socket_del_CALLBACK)(struct pico_socket* s, int cmock_num_calls);
void pico_socket_del_StubWithCallback(CMOCK_pico_socket_del_CALLBACK Callback);
#define pico_socket_setoption_IgnoreAndReturn(cmock_retval) pico_socket_setoption_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void pico_socket_setoption_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define pico_socket_setoption_ExpectAndReturn(s, option, value, cmock_retval) pico_socket_setoption_CMockExpectAndReturn(__LINE__, s, option, value, cmock_retval)
void pico_socket_setoption_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, struct pico_socket* s, int option, void* value, int cmock_to_return);
typedef int (* CMOCK_pico_socket_setoption_CALLBACK)(struct pico_socket* s, int option, void* value, int cmock_num_calls);
void pico_socket_setoption_StubWithCallback(CMOCK_pico_socket_setoption_CALLBACK Callback);
#define pico_socket_getoption_IgnoreAndReturn(cmock_retval) pico_socket_getoption_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void pico_socket_getoption_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define pico_socket_getoption_ExpectAndReturn(s, option, value, cmock_retval) pico_socket_getoption_CMockExpectAndReturn(__LINE__, s, option, value, cmock_retval)
void pico_socket_getoption_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, struct pico_socket* s, int option, void* value, int cmock_to_return);
typedef int (* CMOCK_pico_socket_getoption_CALLBACK)(struct pico_socket* s, int option, void* value, int cmock_num_calls);
void pico_socket_getoption_StubWithCallback(CMOCK_pico_socket_getoption_CALLBACK Callback);
#define pico_socket_shutdown_IgnoreAndReturn(cmock_retval) pico_socket_shutdown_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void pico_socket_shutdown_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define pico_socket_shutdown_ExpectAndReturn(s, mode, cmock_retval) pico_socket_shutdown_CMockExpectAndReturn(__LINE__, s, mode, cmock_retval)
void pico_socket_shutdown_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, struct pico_socket* s, int mode, int cmock_to_return);
typedef int (* CMOCK_pico_socket_shutdown_CALLBACK)(struct pico_socket* s, int mode, int cmock_num_calls);
void pico_socket_shutdown_StubWithCallback(CMOCK_pico_socket_shutdown_CALLBACK Callback);
#define pico_socket_close_IgnoreAndReturn(cmock_retval) pico_socket_close_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void pico_socket_close_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define pico_socket_close_ExpectAndReturn(s, cmock_retval) pico_socket_close_CMockExpectAndReturn(__LINE__, s, cmock_retval)
void pico_socket_close_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, struct pico_socket* s, int cmock_to_return);
typedef int (* CMOCK_pico_socket_close_CALLBACK)(struct pico_socket* s, int cmock_num_calls);
void pico_socket_close_StubWithCallback(CMOCK_pico_socket_close_CALLBACK Callback);
#define pico_socket_frame_alloc_IgnoreAndReturn(cmock_retval) pico_socket_frame_alloc_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void pico_socket_frame_alloc_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, struct pico_frame* cmock_to_return);
#define pico_socket_frame_alloc_ExpectAndReturn(s, len, cmock_retval) pico_socket_frame_alloc_CMockExpectAndReturn(__LINE__, s, len, cmock_retval)
void pico_socket_frame_alloc_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, struct pico_socket* s, uint16_t len, struct pico_frame* cmock_to_return);
typedef struct pico_frame* (* CMOCK_pico_socket_frame_alloc_CALLBACK)(struct pico_socket* s, uint16_t len, int cmock_num_calls);
void pico_socket_frame_alloc_StubWithCallback(CMOCK_pico_socket_frame_alloc_CALLBACK Callback);
#define pico_transport_process_in_IgnoreAndReturn(cmock_retval) pico_transport_process_in_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void pico_transport_process_in_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define pico_transport_process_in_ExpectAndReturn(self, f, cmock_retval) pico_transport_process_in_CMockExpectAndReturn(__LINE__, self, f, cmock_retval)
void pico_transport_process_in_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, struct pico_protocol* self, struct pico_frame* f, int cmock_to_return);
typedef int (* CMOCK_pico_transport_process_in_CALLBACK)(struct pico_protocol* self, struct pico_frame* f, int cmock_num_calls);
void pico_transport_process_in_StubWithCallback(CMOCK_pico_transport_process_in_CALLBACK Callback);
#define pico_socket_clone_IgnoreAndReturn(cmock_retval) pico_socket_clone_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void pico_socket_clone_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, struct pico_socket* cmock_to_return);
#define pico_socket_clone_ExpectAndReturn(facsimile, cmock_retval) pico_socket_clone_CMockExpectAndReturn(__LINE__, facsimile, cmock_retval)
void pico_socket_clone_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, struct pico_socket* facsimile, struct pico_socket* cmock_to_return);
typedef struct pico_socket* (* CMOCK_pico_socket_clone_CALLBACK)(struct pico_socket* facsimile, int cmock_num_calls);
void pico_socket_clone_StubWithCallback(CMOCK_pico_socket_clone_CALLBACK Callback);
#define pico_socket_add_IgnoreAndReturn(cmock_retval) pico_socket_add_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void pico_socket_add_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int8_t cmock_to_return);
#define pico_socket_add_ExpectAndReturn(s, cmock_retval) pico_socket_add_CMockExpectAndReturn(__LINE__, s, cmock_retval)
void pico_socket_add_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, struct pico_socket* s, int8_t cmock_to_return);
typedef int8_t (* CMOCK_pico_socket_add_CALLBACK)(struct pico_socket* s, int cmock_num_calls);
void pico_socket_add_StubWithCallback(CMOCK_pico_socket_add_CALLBACK Callback);
#define pico_transport_error_IgnoreAndReturn(cmock_retval) pico_transport_error_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void pico_transport_error_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define pico_transport_error_ExpectAndReturn(f, proto, code, cmock_retval) pico_transport_error_CMockExpectAndReturn(__LINE__, f, proto, code, cmock_retval)
void pico_transport_error_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, struct pico_frame* f, uint8_t proto, int code, int cmock_to_return);
typedef int (* CMOCK_pico_transport_error_CALLBACK)(struct pico_frame* f, uint8_t proto, int code, int cmock_num_calls);
void pico_transport_error_StubWithCallback(CMOCK_pico_transport_error_CALLBACK Callback);
#define pico_sockets_loop_IgnoreAndReturn(cmock_retval) pico_sockets_loop_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void pico_sockets_loop_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define pico_sockets_loop_ExpectAndReturn(loop_score, cmock_retval) pico_sockets_loop_CMockExpectAndReturn(__LINE__, loop_score, cmock_retval)
void pico_sockets_loop_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int loop_score, int cmock_to_return);
typedef int (* CMOCK_pico_sockets_loop_CALLBACK)(int loop_score, int cmock_num_calls);
void pico_sockets_loop_StubWithCallback(CMOCK_pico_sockets_loop_CALLBACK Callback);
#define pico_sockets_find_IgnoreAndReturn(cmock_retval) pico_sockets_find_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void pico_sockets_find_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, struct pico_socket* cmock_to_return);
#define pico_sockets_find_ExpectAndReturn(local, remote, cmock_retval) pico_sockets_find_CMockExpectAndReturn(__LINE__, local, remote, cmock_retval)
void pico_sockets_find_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint16_t local, uint16_t remote, struct pico_socket* cmock_to_return);
typedef struct pico_socket* (* CMOCK_pico_sockets_find_CALLBACK)(uint16_t local, uint16_t remote, int cmock_num_calls);
void pico_sockets_find_StubWithCallback(CMOCK_pico_sockets_find_CALLBACK Callback);
#define pico_is_port_free_IgnoreAndReturn(cmock_retval) pico_is_port_free_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void pico_is_port_free_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define pico_is_port_free_ExpectAndReturn(proto, port, addr, net, cmock_retval) pico_is_port_free_CMockExpectAndReturn(__LINE__, proto, port, addr, net, cmock_retval)
void pico_is_port_free_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint16_t proto, uint16_t port, void* addr, void* net, int cmock_to_return);
typedef int (* CMOCK_pico_is_port_free_CALLBACK)(uint16_t proto, uint16_t port, void* addr, void* net, int cmock_num_calls);
void pico_is_port_free_StubWithCallback(CMOCK_pico_is_port_free_CALLBACK Callback);
#define pico_get_sockport_IgnoreAndReturn(cmock_retval) pico_get_sockport_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void pico_get_sockport_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, struct pico_sockport* cmock_to_return);
#define pico_get_sockport_ExpectAndReturn(proto, port, cmock_retval) pico_get_sockport_CMockExpectAndReturn(__LINE__, proto, port, cmock_retval)
void pico_get_sockport_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint16_t proto, uint16_t port, struct pico_sockport* cmock_to_return);
typedef struct pico_sockport* (* CMOCK_pico_get_sockport_CALLBACK)(uint16_t proto, uint16_t port, int cmock_num_calls);
void pico_get_sockport_StubWithCallback(CMOCK_pico_get_sockport_CALLBACK Callback);

#endif
