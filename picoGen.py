#!/usr/bin/python
import glob, os
import re
from dependencyBuilder import buildDependencyList





"""

    Define a pico_defines.h file like
/* PicoTCP - Definition file */
#ifndef PICO_DEFINES_H
#define PICO_DEFINES_H

//#define PICO_SUPPORT_ETH
#define PICO_SUPPORT_ICMP4
#define PICO_SUPPORT_IPV4
#define PICO_SUPPORT_UDP

#endif

    Run this to try out the script and it's functionality: python picoGen.py; gcc -o pico picotcp.c

"""








stackFilenames = ['pico_stack.c', 'pico_tree.c', 'pico_socket.c', 'pico_socket_multicast.c', 'pico_protocol.c', 'pico_md5.c', 'pico_frame.c', 'pico_device.c']

moduleFilenames = ['pico_ethernet.c', 'pico_icmp4.c', 'pico_ipv4.c', 'pico_socket_udp.c', 'pico_udp.c']

includeFilenames = ['pico_config.h', 'pico_addressing.h', 'heap.h', 'pico_config.h', 'pico_constants.h', 'pico_frame.h', 'pico_stack.h', 'pico_tree.h', 'pico_queue.h', 'pico_socket.h', 'pico_socket_multicast.h',
                    'pico_protocol.h', 'pico_md5.h', 'pico_device.h', 'pico_eth.h']
includeModuleNames = ['pico_ethernet.h', 'pico_icmp4.h', 'pico_ipv4.h', 'pico_socket_udp.h', 'pico_udp.h', 'pico_6lowpan.h', 'pico_socket_tcp.h', 'pico_tcp.h', 'pico_nat.h']




PICOPATH = '.'
INCLUDEFOLDER = 'include'
ARCHFOLDER = 'arch'
MODULESFOLDER = 'modules'

includeFiles = {}

#parse include dir
for file in glob.glob(os.path.join(PICOPATH, INCLUDEFOLDER, "*.h")):
    includeFiles[os.path.basename(file)] = os.path.join(INCLUDEFOLDER, os.path.basename(file))

#parse arch dir
for file in glob.glob(os.path.join(PICOPATH, INCLUDEFOLDER, ARCHFOLDER, "*.h")):
    key = os.path.join('arch', os.path.basename(file))
    value = os.path.join(INCLUDEFOLDER, ARCHFOLDER, os.path.basename(file))
    includeFiles[key] = value

#parse modules dir
for file in glob.glob(os.path.join(PICOPATH, MODULESFOLDER, "*.h")):
    includeFiles[os.path.basename(file)] = os.path.join(MODULESFOLDER, os.path.basename(file))

def findFileAndReplace(outfile, filename):
    return
    if filename in includeDirFiles:
        with open(os.path.join(PICOPATH, 'include', filename)) as infile:
            outfile.write('\n/*********************REPLACED FILE START ' + os.path.join('include', filename) + ' REPLACED FILE START*********************/\n\n')
            for line in infile:
                outfile.write(line)
            outfile.write('\n/***********************REPLACED FILE END ' + os.path.join('include', filename) + ' REPLACED FILE END***********************/\n\n')

    elif filename in modulesDirFiles:
        with open(os.path.join(PICOPATH, 'modules', filename)) as infile:
            outfile.write('\n/*********************REPLACED FILE START ' + os.path.join('modules', filename) + ' REPLACED FILE START*********************/\n\n')
            for line in infile:
                outfile.write(line)
            outfile.write('\n/***********************REPLACED FILE END ' + os.path.join('modules', filename) + ' REPLACED FILE END***********************/\n\n')
    else:
        print "////////////////////Didn't find file", filename

def checkAndReplaceLine(outfile, line):
    m = re.match( r'^#.*include[ ]+["<](pico_.+\.h|heap\.h)[">]$', line, re.M|re.I)
    if m:
        findFileAndReplace(outfile, m.group(1))
    else:
        outfile.write(line)

def writeFile(outfile, folder, fname):
    with open(PICOPATH + '/' + folder + '/' + fname) as infile:
        outfile.write('\n/************************************START ' + folder + '/' + fname + ' START**********************************/\n\n')
        for line in infile:
            checkAndReplaceLine(outfile, line)
        outfile.write('\n/************************************END ' + folder + '/' + fname + ' END**********************************/\n\n')

def writeHFile(outfile, file):
    with open(os.path.join(PICOPATH, file)) as infile:
        outfile.write('\n/************************************START ' + file + ' START**********************************/\n\n')
        for line in infile:
            m = re.match( r'^#.*include[ ]+["<](pico_.+\.h|heap\.h)[">]$', line, re.M|re.I)
            if m:
                # we don't want infinite loops
                continue
            else:
                outfile.write(line)
        outfile.write('\n/************************************END ' + file + ' END**********************************/\n\n')

# generate single .c file
with open('picotcp.c', 'w') as outfile:
    outfile.write("/*************************************************************************************/\n")
    outfile.write("/*   This file was autogenerated. It concatenates multiple files into one big one    */\n")
    outfile.write("/*************************************************************************************/\n\n")
    
    outfile.write('#include "picotcp.h"\n')
    for fname in stackFilenames:
        writeFile(outfile, 'stack', fname)

    for fname in moduleFilenames:
        writeFile(outfile, 'modules', fname)
        
# generate single .h file
with open('picotcp.h', 'w') as outfile:
    outfile.write("/*************************************************************************************/\n")
    outfile.write("/*   This file was autogenerated. It concatenates multiple files into one big one    */\n")
    outfile.write("/*************************************************************************************/\n\n")
    
    outfile.write('#ifndef __PICOTCP_H__\n')
    outfile.write('#define __PICOTCP_H__\n')

    #writeFile(outfile, 'include', 'pico_defines.h')
    list = buildDependencyList()
    #for key, value in includeFiles.items():
    for l in list:
        path = includeFiles[l]
        writeHFile(outfile, path)

    outfile.write('#endif\n')