!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
IS_MODULE_IPV4	modules/pico_module_ipv4.c	6;"	d	file:
IS_MODULE_IPV4	modules/pico_module_ipv4.c	8;"	d	file:
MAX_MODULE_NAME	include/pico_common.h	51;"	d
PICO_COMMON_H	include/pico_common.h	2;"	d
PICO_IDETH_IP	proto_gen.c	41;"	d	file:
PICO_LAYER_APP	proto_gen.c	38;"	d	file:
PICO_LAYER_DATALINK	proto_gen.c	35;"	d	file:
PICO_LAYER_NETWORK	proto_gen.c	36;"	d	file:
PICO_LAYER_TRANSPORT	proto_gen.c	37;"	d	file:
PICO_MODULE_IPV4	modules/pico_module_ipv4.h	2;"	d
PICO_ROUTING_INCOMING	include/pico_common.h	/^  PICO_ROUTING_INCOMING = 0,$/;"	e	enum:routing_stage
PICO_ROUTING_OUTGOING	include/pico_common.h	/^  PICO_ROUTING_OUTGOING = 1$/;"	e	enum:routing_stage
PICO_SETUP_H	include/pico_setup.h	2;"	d
PICO_UNREACHABLE	proto_gen.c	40;"	d	file:
PROTO_IPV4	modules/pico_module_ipv4.c	33;"	d	file:
RB_AUGMENT	include/rb.h	43;"	d
RB_AUGMENT	rb.h	43;"	d
RB_BLACK	include/rb.h	14;"	d
RB_BLACK	rb.h	14;"	d
RB_COLOR	include/rb.h	27;"	d
RB_COLOR	rb.h	27;"	d
RB_EMPTY	include/rb.h	29;"	d
RB_EMPTY	rb.h	29;"	d
RB_ENTRY	include/rb.h	16;"	d
RB_ENTRY	rb.h	16;"	d
RB_FIND	include/rb.h	432;"	d
RB_FIND	rb.h	432;"	d
RB_FOREACH	include/rb.h	439;"	d
RB_FOREACH	rb.h	439;"	d
RB_FOREACH_REVERSE	include/rb.h	449;"	d
RB_FOREACH_REVERSE	rb.h	449;"	d
RB_FOREACH_REVERSE_SAFE	include/rb.h	454;"	d
RB_FOREACH_REVERSE_SAFE	rb.h	454;"	d
RB_FOREACH_SAFE	include/rb.h	444;"	d
RB_FOREACH_SAFE	rb.h	444;"	d
RB_GENERATE	include/rb.h	106;"	d
RB_GENERATE	rb.h	106;"	d
RB_GENERATE_INTERNAL	include/rb.h	110;"	d
RB_GENERATE_INTERNAL	rb.h	110;"	d
RB_GENERATE_STATIC	include/rb.h	108;"	d
RB_GENERATE_STATIC	rb.h	108;"	d
RB_HEAD	include/rb.h	2;"	d
RB_HEAD	rb.h	2;"	d
RB_INF	include/rb.h	428;"	d
RB_INF	rb.h	428;"	d
RB_INIT	include/rb.h	10;"	d
RB_INIT	rb.h	10;"	d
RB_INITIALIZER	include/rb.h	7;"	d
RB_INITIALIZER	rb.h	7;"	d
RB_INSERT	include/rb.h	430;"	d
RB_INSERT	rb.h	430;"	d
RB_LEFT	include/rb.h	24;"	d
RB_LEFT	rb.h	24;"	d
RB_MAX	include/rb.h	437;"	d
RB_MAX	rb.h	437;"	d
RB_MIN	include/rb.h	436;"	d
RB_MIN	rb.h	436;"	d
RB_NEGINF	include/rb.h	427;"	d
RB_NEGINF	rb.h	427;"	d
RB_NEXT	include/rb.h	434;"	d
RB_NEXT	rb.h	434;"	d
RB_NFIND	include/rb.h	433;"	d
RB_NFIND	rb.h	433;"	d
RB_PARENT	include/rb.h	26;"	d
RB_PARENT	rb.h	26;"	d
RB_PREV	include/rb.h	435;"	d
RB_PREV	rb.h	435;"	d
RB_PROTOTYPE	include/rb.h	87;"	d
RB_PROTOTYPE	rb.h	87;"	d
RB_PROTOTYPE_INTERNAL	include/rb.h	91;"	d
RB_PROTOTYPE_INTERNAL	rb.h	91;"	d
RB_PROTOTYPE_STATIC	include/rb.h	89;"	d
RB_PROTOTYPE_STATIC	rb.h	89;"	d
RB_RED	include/rb.h	15;"	d
RB_RED	rb.h	15;"	d
RB_REMOVE	include/rb.h	431;"	d
RB_REMOVE	rb.h	431;"	d
RB_RIGHT	include/rb.h	25;"	d
RB_RIGHT	rb.h	25;"	d
RB_ROOT	include/rb.h	28;"	d
RB_ROOT	rb.h	28;"	d
RB_ROTATE_LEFT	include/rb.h	46;"	d
RB_ROTATE_LEFT	rb.h	46;"	d
RB_ROTATE_RIGHT	include/rb.h	66;"	d
RB_ROTATE_RIGHT	rb.h	66;"	d
RB_SET	include/rb.h	31;"	d
RB_SET	rb.h	31;"	d
RB_SET_BLACKRED	include/rb.h	37;"	d
RB_SET_BLACKRED	rb.h	37;"	d
_do_pico_frame_deliver	proto_gen.c	/^static int _do_pico_frame_deliver(struct pico_frame *pkt, int cpy)$/;"	f	file:
_mod	modules/pico_module_ipv4.h	22;"	d
_mod	modules/pico_module_ipv4.h	24;"	d
_mod	modules/pico_module_ipv4.h	27;"	d
address_add	modules/pico_module_ipv4.h	/^  int (*address_add)(struct ipv4 *address);$/;"	m	struct:sock_ipv4
address_del	modules/pico_module_ipv4.h	/^  int (*address_del)(struct ipv4 *address);$/;"	m	struct:sock_ipv4
address_list	modules/pico_module_ipv4.h	/^  struct ipv4 *address_list;$/;"	m	struct:sock_ipv4	typeref:struct:sock_ipv4::ipv4
alloc	include/pico_common.h	/^  struct pico_frame* (*alloc)(int payload_size);$/;"	m	struct:connect_down	typeref:struct:connect_down::alloc
app_hdr	include/pico_common.h	/^  void *app_hdr;$/;"	m	struct:pico_frame
buffer	include/pico_common.h	/^  unsigned char *buffer;$/;"	m	struct:pico_frame
buffer_len	include/pico_common.h	/^  uint32_t      buffer_len;$/;"	m	struct:pico_frame
connect_down	include/pico_common.h	/^struct connect_down {$/;"	s
connect_up	include/pico_common.h	/^struct connect_up {$/;"	s
data_hdr	include/pico_common.h	/^  void *data_hdr;$/;"	m	struct:pico_frame
default_gateway	modules/pico_module_ipv4.c	/^  struct ipv4 *default_gateway;$/;"	m	struct:proto_ipv4	typeref:struct:proto_ipv4::ipv4	file:
dest	include/pico_common.h	/^  struct pico_module *dest; \/* For delivery action towards next module *\/$/;"	m	struct:pico_frame	typeref:struct:pico_frame::pico_module
dev	modules/pico_module_ipv4.h	/^  struct pico_dev *dev;$/;"	m	struct:sock_ipv4	typeref:struct:sock_ipv4::pico_dev
dst	modules/pico_module_ipv4.c	/^  struct ipv4 *dst;$/;"	m	struct:ipv4_route	typeref:struct:ipv4_route::ipv4	file:
flags	include/pico_common.h	/^  uint16_t flags;   \/* XXX *\/$/;"	m	struct:pico_frame
frame_deliver_down	proto_gen.c	/^static int frame_deliver_down(struct pico_frame *pkt)$/;"	f	file:
frame_deliver_up	proto_gen.c	/^static int frame_deliver_up(struct pico_frame *pkt)$/;"	f	file:
gateway	modules/pico_module_ipv4.c	/^  struct ipv4 *gateway;$/;"	m	struct:ipv4_route	typeref:struct:ipv4_route::ipv4	file:
hash	include/pico_common.h	/^  uint32_t                hash;$/;"	m	struct:pico_module
id_eth	include/pico_common.h	/^  uint16_t id_eth; \/* IP or ARP *\/$/;"	m	struct:pico_frame
id_net	include/pico_common.h	/^  uint16_t id_net; \/* version 4 or 6 *\/$/;"	m	struct:pico_frame
id_sock	include/pico_common.h	/^  uint16_t id_sock; \/* Transport layer port *\/$/;"	m	struct:pico_frame
id_trans	include/pico_common.h	/^  uint16_t id_trans; \/* Transport layer protocol *\/$/;"	m	struct:pico_frame
init	include/pico_common.h	/^  int (*init)(struct pico_module *mod);$/;"	m	struct:pico_module
ipv4	modules/pico_module_ipv4.h	/^struct ipv4 {$/;"	s
ipv4_route	modules/pico_module_ipv4.c	/^struct ipv4_route {$/;"	s	file:
layer	include/pico_common.h	/^  int                       layer;$/;"	m	struct:pico_module
metric	modules/pico_module_ipv4.c	/^  unsigned int metric;$/;"	m	struct:ipv4_route	file:
mod_ipv4_alloc	modules/pico_module_ipv4.c	/^struct pico_frame* mod_ipv4_alloc(int payload_size)$/;"	f
mod_ipv4_init	modules/pico_module_ipv4.c	/^int mod_ipv4_init(struct pico_module *ip)$/;"	f
mod_ipv4_recv	modules/pico_module_ipv4.c	/^int mod_ipv4_recv(struct pico_frame *pkt)$/;"	f
mod_ipv4_run	modules/pico_module_ipv4.c	/^void mod_ipv4_run(void)$/;"	f
mod_ipv4_send	modules/pico_module_ipv4.c	/^int mod_ipv4_send(struct pico_frame *pkt)$/;"	f
mod_ipv4_shutdown	modules/pico_module_ipv4.c	/^void mod_ipv4_shutdown(struct pico_module *ip)$/;"	f
name	include/pico_common.h	/^  char                    name[MAX_MODULE_NAME];$/;"	m	struct:pico_module
net	modules/pico_module_ipv4.c	/^  struct pico_device *net;$/;"	m	struct:ipv4_route	typeref:struct:ipv4_route::pico_device	file:
net_hdr	include/pico_common.h	/^  void *net_hdr;$/;"	m	struct:pico_frame
next	include/pico_common.h	/^  struct connect_down *next;$/;"	m	struct:connect_down	typeref:struct:connect_down::connect_down
next	include/pico_common.h	/^  struct connect_up *next;$/;"	m	struct:connect_up	typeref:struct:connect_up::connect_up
next	include/pico_common.h	/^  struct pico_frame *next;$/;"	m	struct:pico_frame	typeref:struct:pico_frame::pico_frame
next	include/pico_common.h	/^  struct stack_app *next;$/;"	m	struct:stack_app	typeref:struct:stack_app::stack_app
next	modules/pico_module_ipv4.h	/^  struct ipv4 *next;$/;"	m	struct:ipv4	typeref:struct:ipv4::ipv4
next	modules/pico_module_ipv4.h	/^  struct sock_ipv4 *next;$/;"	m	struct:sock_ipv4	typeref:struct:sock_ipv4::sock_ipv4
origin	include/pico_common.h	/^  struct pico_module *origin;$/;"	m	struct:pico_frame	typeref:struct:pico_frame::pico_module
owner	include/pico_common.h	/^  struct pico_module *owner;$/;"	m	struct:pico_frame	typeref:struct:pico_frame::pico_module
payload	include/pico_common.h	/^  unsigned char *payload;$/;"	m	struct:pico_frame
payload_len	include/pico_common.h	/^  int payload_len;$/;"	m	struct:pico_frame
pico_alloc	include/pico_setup.h	12;"	d
pico_frame	include/pico_common.h	/^struct pico_frame {$/;"	s
pico_frame_deliver	proto_gen.c	/^int pico_frame_deliver(struct pico_frame *pkt)$/;"	f
pico_frame_deliver_cpy	proto_gen.c	/^int pico_frame_deliver_cpy(struct pico_frame *pkt)$/;"	f
pico_free	include/pico_setup.h	13;"	d
pico_module	include/pico_common.h	/^struct pico_module {$/;"	s
pico_module_ipv4	modules/pico_module_ipv4.c	/^struct pico_module  pico_module_ipv4 = {$/;"	v	typeref:struct:pico_module
pico_module_ipv4	modules/pico_module_ipv4.h	/^_mod struct pico_module pico_module_ipv4;$/;"	v	typeref:struct:pico_module
pico_zalloc	include/pico_setup.h	11;"	d
port	include/pico_common.h	/^  uint16_t port; $/;"	m	struct:stack_app
priv	include/pico_common.h	/^  void *priv;$/;"	m	struct:pico_module
proto_ipv4	modules/pico_module_ipv4.c	/^struct proto_ipv4 {$/;"	s	file:
protocol	include/pico_common.h	/^  uint16_t protocol;$/;"	m	struct:stack_app
recv	include/pico_common.h	/^  int (*recv)(struct pico_frame *p);$/;"	m	struct:connect_up
recv_ready	include/pico_common.h	/^  int (*recv_ready)(struct pico_frame *p);$/;"	m	struct:connect_up
routes	modules/pico_module_ipv4.c	/^  struct ipv4_route *routes;$/;"	m	struct:proto_ipv4	typeref:struct:proto_ipv4::ipv4_route	file:
routing_compare	modules/pico_module_ipv4.c	/^int routing_compare(struct ipv4_route *a, struct ipv4_route *b)$/;"	f
routing_stage	include/pico_common.h	/^enum routing_stage {$/;"	g
rtree	modules/pico_module_ipv4.c	/^  struct routing_tree rtree;$/;"	m	struct:proto_ipv4	typeref:struct:proto_ipv4::routing_tree	file:
run	include/pico_common.h	/^  void (*run)(void);$/;"	m	struct:pico_module
s_addr	modules/pico_module_ipv4.h	/^  uint32_t s_addr;$/;"	m	struct:ipv4
s_netmask	modules/pico_module_ipv4.h	/^  uint32_t s_netmask;$/;"	m	struct:ipv4
send	include/pico_common.h	/^  int (*send)(struct pico_frame *p);$/;"	m	struct:connect_down
shutdown	include/pico_common.h	/^  void (*shutdown)(struct pico_module *mod);$/;"	m	struct:pico_module
sock_ipv4	modules/pico_module_ipv4.h	/^struct sock_ipv4 {$/;"	s
socks	modules/pico_module_ipv4.c	/^  struct sock_ipv4 *socks;$/;"	m	struct:proto_ipv4	typeref:struct:proto_ipv4::sock_ipv4	file:
stack_app	include/pico_common.h	/^struct stack_app { \/* E.g. ARP, ICMP, ... *\/$/;"	s
stage	include/pico_common.h	/^  enum routing_stage stage;$/;"	m	struct:pico_frame	typeref:enum:pico_frame::routing_stage
to_lower	include/pico_common.h	/^  struct connect_up   to_lower;$/;"	m	struct:pico_module	typeref:struct:pico_module::connect_up
to_upper	include/pico_common.h	/^  struct connect_down to_upper;$/;"	m	struct:pico_module	typeref:struct:pico_module::connect_down
transport_hdr	include/pico_common.h	/^  void *transport_hdr;$/;"	m	struct:pico_frame
usage_count	include/pico_common.h	/^  uint32_t           usage_count; \/* To handling frame copies and destruction *\/$/;"	m	struct:pico_frame
